{
	// Place your snippets for octave here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	" A devider consisting of comments. ": {
  "prefix": "comment_devider",
  "body": [
    "% ------------------------------------------------"
  ],
  "description": " A devider consisting of comments. "
}, 
"Default file header": {
  "prefix": "header",
  "body": [
    "% ------------------------------------------------",
    "% Script Name: ${TM_FILENAME}",
    "% ------------------------------------------------",
    "% Author: ${1:author}",
    "% Date : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
    "% ",
    "% Description: ${2:Description}",
    "% ------------------------------------------------",
    ""
  ],
  "description": "Default file header"
},
" A devider consisting of comments and devider. ": {
  "prefix": "comment_block",
  "body": [
    "% ------------------------------------------------",
    "% ${1:comment}",
    "% ------------------------------------------------"
  ],
  "description": " A devider consisting of comments. "
}, 
"A single line comment": {
  "prefix": "comment_single_line",
  "body": [
    " ${1:comment}",
    ""
  ],
  "description": "A single line comment"
}, 
  "for-loop": {
    "prefix": "for",
    "description": "for loop with index variable",
    "body": [
      "for ${1:i} = $2",
      "  $0",
      "endfor"
    ]
  },
  "while-loop": {
    "prefix": "while",
    "body": [
      "while $1",
      "  $0",
      "endwhile"
    ]
  },
  "try-catch": {
    "prefix": "try",
    "body": [
      "try",
      "  $0",
      "catch err",
      "end_try_catch"
    ]
  },
  "unwind-protect": {
    "prefix": "unwind_protect",
    "body": [
      "unwind_protect",
      "  $0",
      "end_unwind_protect"
    ]
  },
  "function": {
    "prefix": "function",
    "description": "function (zero argouts)",
    "body": [
      "function $1 ($2)",
      "  $0",
      "endfunction"
    ]
  },
  "function-with-argout": {
    "prefix": "function",
    "description": "function (one argout)",
    "body": [
      "function $1 = $2 ($3)",
      "  $0",
      "endfunction"
    ]
  },
  "function-with-doco": {
    "prefix": "function",
    "description": "function with doco",
    "body": [
      "## -*- texinfo -*-",
      "## @node ${1:function}",
      "## @deftypefn {Function} {@var{${2:argouts}} =} $1 ($3)",
      "##",
      "## @end deftypefn",
      "function ${2} = $1 ($4)",
      "  $0",
      "endfunction"
    ]
  },
  "classdef": {
    "prefix": "classdef",
    "body": [
      "## -*- texinfo -*-",
      "## @deftp {Class} ${1:class}",
      "##",
      "## @end deftp",
      "",
      "classdef ${1:class}",
      "",
      "  properties",
      "    $0",
      "  endproperties",
      "",
      "  methods",
      "",
      "    function this = ${1:classname} ()",
      "      if nargin == 0",
      "        return",
      "      endif",
      "    endfunction",
      "",
      "  endmethods",
      "",
      "endclassdef"
    ]
  },
  "get-set": {
    "prefix": "getset",
    "description": "getter/setter pair",
    "body": [
      "function out = get.${1:property} (this)",
      "  $0",
      "endfunction",
      "",
      "function this = set.${1:property} (this, val)",
      "  ",
      "endfunction",
      ""
    ]
  }
}